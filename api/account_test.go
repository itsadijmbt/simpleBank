package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"

	mockdb "github.com/itsadijmbt/simple_bank/db/mock"
	db "github.com/itsadijmbt/simple_bank/db/sqlc"
	"github.com/itsadijmbt/simple_bank/db/util"
	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
)

func TestGetAccountApi(t *testing.T) {
	//! Create a sample Account object with random data.
	//! Internally, randomAccount() constructs a valid Account struct (e.g., ID, Owner, Balance) so we can assert against known values.
	account := randomAccount()

	//? To get a 100% coverage we derive complex tests
	testCases := []struct {
		name          string
		accountId     int64
		buildStubs    func(store *mockdb.MockStore)
		checkResponse func(t *testing.T, recorder *httptest.ResponseRecorder)
	}{
		 {
			name:"OK",
			accountId: account.ID,
			buildStubs:  func(store *mockdb.MockStore){
				store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account.ID)).
				Times(1).
				Return(account, nil)
			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder){
					require.Equal(t, http.StatusOK, recorder.Code)
					requireBodyMatchAccount(t, recorder.Body, account)
			},
		 },
		 //TODO adding more testCases!!
	}

	//iterating throught the testCases

	


	//! Set up GoMock’s Controller which manages mock lifecycles.
	//! The controller tracks EXPECT() calls and ensures they are satisfied when Finish() is called.
	ctrl := gomock.NewController(t)
	//! Defer Finish() so that at the end of the test, GoMock automatically checks all expectations and fails the test if any are unmet.
	defer ctrl.Finish()

	//* Instantiate a MockStore bound to the controller.
	//* NewMockStore is generated by mockgen to implement our Store interface with methods that panic unless stubbed.

	store := mockdb.NewMockStore(ctrl)

	//^ Define a stub for store.GetAccount:
	//^ - gomock.Any() allows any context.Context value (we don’t care about metadata here).
	//^ - gomock.Eq(account.ID) insists the ID passed matches our sample Account.ID.
	//^ - Times(1) enforces exactly one call; helps catch duplicate or missing calls.
	//^ - Return(account, nil) causes the mock to return our prepared account and no error when invoked.

	// store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account.ID)).
	// 	Times(1).
	// 	Return(account, nil)

		//* Build the server, injecting our mock store:
	//* NewServer should wire up HTTP routes (e.g., GET /accounts/:id) to handlers that call store.GetAccount internally.
	server := NewServer(store)

	//* httptest.NewRecorder implements http.ResponseWriter, capturing the handler’s response for inspection.
	recorder := httptest.NewRecorder()

	//^ Construct the HTTP GET request for the specific account endpoint.
	//^ The URL parameter must match the router’s path pattern so the correct handler is invoked.

	url := fmt.Sprintf("/accounts/%d", account.ID)
	request, err := http.NewRequest(http.MethodGet, url, nil)

	//^ require.NoError immediately fails the test if building the request errors (should never happen with valid inputs).

	require.NoError(t, err)

	//* Invoke the server’s router with our fake request and recorder.
	//* Under the hood, ServeHTTP routes the request, extracts path parameters, and calls the handler.

	server.router.ServeHTTP(recorder, request)

	//^ Finally, assert that the HTTP status code is 200 OK.
	//^ If the handler forwarded the mock’s returned account correctly, it should respond with status OK and serialized JSON.


	//moved inside checkResponse
	// require.Equal(t, http.StatusOK, recorder.Code)

	// //! THE BODY IS IN RECORDER.BODY
	// requireBodyMatchAccount(t, recorder.Body, account)
}

func requireBodyMatchAccount(t *testing.T, body *bytes.Buffer, account db.Account) {

	data, err := ioutil.ReadAll(body)

	require.NoError(t, err)

	var gotAccount db.Account
	err = json.Unmarshal(data, &gotAccount)

	require.NoError(t, err)
	require.Equal(t, account, gotAccount)

}

func randomAccount() db.Account {
	return db.Account{
		ID:       util.RandomInt(1, 1000),
		Owner:    util.RandomOwner(),
		Balance:  util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}
}
